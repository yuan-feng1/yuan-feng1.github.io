[{"authors":["admin"],"categories":null,"content":"I worked as a Data Scientist intern at Amazon and Data Engineer Intern Lenovo during which I used SQL, MongoDB and Spark to wrangle with big data, and NLP, A/B testing, machine learning models and statistical methods to analyze the user behaviors.\nI am currently a Master student in Data Science at Duke University - Go Blue Devils😈! Will graduate in May 2021, I am now open to full-time Data Analyst/Data Scientist job opportunities.\nIn addition to programming and analyzing data, I enjoy oil painting and also a world explorer who has travelled 10+ countries in 3 continents\n","date":1549324800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1555459200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://yuan-feng1.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I worked as a Data Scientist intern at Amazon and Data Engineer Intern Lenovo during which I used SQL, MongoDB and Spark to wrangle with big data, and NLP, A/B testing, machine learning models and statistical methods to analyze the user behaviors.\nI am currently a Master student in Data Science at Duke University - Go Blue Devils😈! Will graduate in May 2021, I am now open to full-time Data Analyst/Data Scientist job opportunities.","tags":null,"title":"Yuan Feng","type":"authors"},{"authors":[],"categories":null,"content":"Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"8ebbbdeba622fbc24dab29b4efa6b173","permalink":"https://yuan-feng1.github.io/talk/coding/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/coding/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Coding and Analyzing Qualitative Data","type":"talk"},{"authors":[],"categories":null,"content":"Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a3975af5f5dadc9b2c7bbc4e48bb0e6e","permalink":"https://yuan-feng1.github.io/talk/qualitative/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/qualitative/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Qualitative Research Summer Intensive","type":"talk"},{"authors":[],"categories":null,"content":"Slides can be added in a few ways:\n Create slides using academia\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"f917008f74aa8012979052dcf8dbf864","permalink":"https://yuan-feng1.github.io/talk/synthesizing/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/synthesizing/","section":"talk","summary":"An example talk using academia's Markdown slides feature.","tags":[],"title":"Synthesizing Qualitative Data","type":"talk"},{"authors":null,"categories":null,"content":"Spotify Songs Data Understanding and managing data is one of the priorities of analysts and data scientists. Relational databases are common and useful tools for performing tasks in selected database. Both querying and building databases are essential functionaries of relational databases. This post will focus on constructing databases in SQL with data from Spotify songs. Various information including track name, album name and track characteristics are provided in this dataset. Analysis will be also performed on the intrumentalness of songs in playlists.\nDatabase Basics In order for databased to run efficiently, normalization is a common technique to reduce redundancy in storaging the information. Normalization derives the relationships of contents and stores the dataset in separate tables.\n First Normal Form (1NF)  This is the basic requirement for database efficiency where we require four must-have features: Each column name is unique; Atomic values in each cell; The values in one column should belong to one type and the order does not matter.\n Second Normal Form (2NF)  We then come to Second Normal Form where there are more requirements based on 1NF: Now no partial dependency is allowed. It means that there cannot be dependencies other than the Primary Key, which is a set of values that could uniquely identify a record. And we must find each value based on the complete Primary Key.\n Third Normal Form (3NF)  In 3NF, besides 1NF and 2NF requirements, we are not allowed to have transitive dependencies: Non-Primary Key columns in the data cannot contain information about the rest of columns.\nOur Schema If we know the track ID, we could find its name, release date and artist. And based on the track name, we will then find about album name, album release date, etc. Therefore, the best schema is to separate them into different tables to achieve Third Normal Form:\n   Table Columns Included     track_id_playlist_id Track ID and Playlist ID   track_id_album_id Track ID and Album ID   playlist_id_album_id Playlist ID and Album ID   album_id_album_name Album ID and Album Name   album_id_album_date Album ID and Release Date   playlist_id_name Playlist ID and Name   playlist_id_genre Playlist ID and Genre   playlist_id_subgenre Playlist ID and Subgenre   track_id_track_name Track ID and Track names   track_id_track_artist Track ID and artist names   track_id_more_details Track ID and other features    Database Constrcution With the help of SQLite, database construction is now an easy process, we can connect to the server using just a few lines of code and upload dataframes directly into the created database:\n%load_ext sql %sql sqlite:// %sql PERSIST track_id_album_id; %sql PERSIST track_id_playlist_id; ... Here is detailed process ans source code on my Github.\nDatabase Test Run We can test the functionality of the database by running some queries to solve a question of our interest. Here we want to see find the names of all playlists that contain instrumentals.\nBased on the data dictionary, we know songs with \u0026ldquo;instrumentals\u0026rdquo; bigger than .5 are qualified for this question. To find the names of such playlists, we need information from \u0026ldquo;track_id_playlist_id\u0026rdquo;, \u0026ldquo;track_id_more_details\u0026rdquo; and \u0026ldquo;playlist_id_name\u0026rdquo;. The following code first selects playlist ID that has instrumental songs and saves as temporary table, then join the \u0026ldquo;playlist_name\u0026rdquo; table to find the names corresponding with these track IDs.\n%%sql create table temp as select distinct(p.playlist_id) from track_id_playlist_id as p left join track_id_more_details as t on t.track_id = p.track_id where t.instrumentalness \u0026gt; 0.5; select distinct(p.playlist_name) from temp left join playlist_id_name as p on p.playlist_id = temp.playlist_id DROP TABLE IF EXISTS temp; Now our database is successfully implemented! As we could see below, the code will return a list of all playlists that contain instrumentals, which means it\u0026rsquo;s running as expected:\n","date":1602201600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602201600,"objectID":"d7a6b9bfc1b30ed5fc74865405b41d6e","permalink":"https://yuan-feng1.github.io/project/hw4/","publishdate":"2020-10-09T00:00:00Z","relpermalink":"/project/hw4/","section":"project","summary":"Spotify Songs Data Understanding and managing data is one of the priorities of analysts and data scientists. Relational databases are common and useful tools for performing tasks in selected database. Both querying and building databases are essential functionaries of relational databases. This post will focus on constructing databases in SQL with data from Spotify songs. Various information including track name, album name and track characteristics are provided in this dataset. Analysis will be also performed on the intrumentalness of songs in playlists.","tags":[""],"title":"Spotify Song Database","type":"project"},{"authors":null,"categories":null,"content":"Spotify Songs Data hhhhhhhhhhhhh\nbhbchsavjdfbkfbbseflbjse\nDatabase Basics    Table Columns Included     track_id_playlist_id Track ID and Playlist ID   track_id_album_id Track ID and Album ID   playlist_id_album_id Playlist ID and Album ID   album_id_album_name Album ID and Album Name   album_id_album_date Album ID and Release Date   playlist_id_name Playlist ID and Name   playlist_id_genre Playlist ID and Genre   playlist_id_subgenre Playlist ID and Subgenre   track_id_track_name Track ID and Track names   track_id_track_artist Track ID and artist names   track_id_more_details Track ID and other features    ","date":1602201600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1602201600,"objectID":"2cddf8292664de1d1069627e742b79e5","permalink":"https://yuan-feng1.github.io/project/hw6/","publishdate":"2020-10-09T00:00:00Z","relpermalink":"/project/hw6/","section":"project","summary":"Spotify Songs Data hhhhhhhhhhhhh\nbhbchsavjdfbkfbbseflbjse\nDatabase Basics    Table Columns Included     track_id_playlist_id Track ID and Playlist ID   track_id_album_id Track ID and Album ID   playlist_id_album_id Playlist ID and Album ID   album_id_album_name Album ID and Album Name   album_id_album_date Album ID and Release Date   playlist_id_name Playlist ID and Name   playlist_id_genre Playlist ID and Genre   playlist_id_subgenre Playlist ID and Subgenre   track_id_track_name Track ID and Track names   track_id_track_artist Track ID and artist names   track_id_more_details Track ID and other features    ","tags":[""],"title":"Spotify Song Database","type":"project"},{"authors":null,"categories":null,"content":"Malaria is caused by parasites from the genus Plasmodium, which could be spread to people by the bite of infected mosquitoes. In 2017, there were 219 million malaria cases that led to 435,000 deaths Malaria is an urgent public health priority for past decade. It has been estimated that around half of the world population are at risk today. Therefore, analysis on Malaria is useful in terms of global public health for research in preventive measures. I would like to share three visualizations using an online dataset. These plots are generated by Python. Link to the Jupyter Notebook\n Plot 1 Avg. Malaria Deaths per 100,000 people (1990-2016)  Based on recent statistics, Africa carries a disproportionately high portion of the global malaria burden. As shown from the following heatmap measuring the number of death per 1000 people worldwide from 1990 to 2016. By the heavy concentration of red color on the map, it seems that most malaria cases and deaths occur in sub-Saharan Africa.\n Plot 2 Number of Worldwide Malaria Deaths categorized by Age (1990-2016)  Most victims of Malaria are children. It is estimated to be one of the leading causes of child mortality. This could be demonstrated by the following plot. From 1990-2016, in terms of the total Malaria deaths, 77% of them are children under 5.\n Plot 3 Number of Top 10 Countries with most Malaria Deaths (1990-2016)  Noy only sub-Saharan Africa has suffered most from Malaria, Nigeria and Congo are countries most affected by Malaria in the world. Nigeria alone accounts for 29.1% of total deaths caused by Malaria, and this number at Congo is 11.3%. The 10 most affected countries took up 76% of total Malaria deaths while the rest of world only accounts for 24.0% (1990-2016). Medical prevention of Malaria should be regarded as a top priority for these countries.\nThat\u0026rsquo;s all for this blog. Thanks for reading!\nLet me know if you have any comments/question. Feel free to find me at yuan.feng347@duke.edu\n","date":1600041600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600041600,"objectID":"d295a3669ce2202227671181c60108d0","permalink":"https://yuan-feng1.github.io/project/hw3/","publishdate":"2020-09-14T00:00:00Z","relpermalink":"/project/hw3/","section":"project","summary":"3 informative plots on Malaria","tags":["Demo"],"title":"Visualizing Malaria Death","type":"project"},{"authors":null,"categories":null,"content":" Problem 13 Large sum - Solved by 224972  In this question, we are asked to:\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers. link here\nThe thought process of this problem is quite straightforward: we first sum up the one-hundred 50-digit numbers, then with the result, turn it into a string, then slicing the first ten digits would solve the problem.\nIn python, this is actually an easy process, using the built-in sum() and str() function, we could simply generate the sum, then turn it into a string and slice the first 10 digits.\ndef Solution_13(nums): \u0026#34;\u0026#34;\u0026#34; The sum of nums array, transform into string, take the first 10 digits \u0026#34;\u0026#34;\u0026#34; ttl = sum(nums) answer = str(ttl)[:10] return answer nums = [ 37107287533902102798797998220837590246510135740250, 46376937677490009712648124896970078050417018260538, 74324986199524741059474233309513058123726617309629, 91942213363574161572522430563301811072406154908250, 23067588207539346171171980310421047513778063246676, 89261670696623633820136378418383684178734361726757, 28112879812849979408065481931592621691275889832738, 44274228917432520321923589422876796487670272189318, 47451445736001306439091167216856844588711603153276, 70386486105843025439939619828917593665686757934951, 62176457141856560629502157223196586755079324193331, 64906352462741904929101432445813822663347944758178, 92575867718337217661963751590579239728245598838407, 58203565325359399008402633568948830189458628227828, 80181199384826282014278194139940567587151170094390, 35398664372827112653829987240784473053190104293586, 86515506006295864861532075273371959191420517255829, 71693888707715466499115593487603532921714970056938, 54370070576826684624621495650076471787294438377604, 53282654108756828443191190634694037855217779295145, 36123272525000296071075082563815656710885258350721, 45876576172410976447339110607218265236877223636045, 17423706905851860660448207621209813287860733969412, 81142660418086830619328460811191061556940512689692, 51934325451728388641918047049293215058642563049483, 62467221648435076201727918039944693004732956340691, 15732444386908125794514089057706229429197107928209, 55037687525678773091862540744969844508330393682126, 18336384825330154686196124348767681297534375946515, 80386287592878490201521685554828717201219257766954, 78182833757993103614740356856449095527097864797581, 16726320100436897842553539920931837441497806860984, 48403098129077791799088218795327364475675590848030, 87086987551392711854517078544161852424320693150332, 59959406895756536782107074926966537676326235447210, 69793950679652694742597709739166693763042633987085, 41052684708299085211399427365734116182760315001271, 65378607361501080857009149939512557028198746004375, 35829035317434717326932123578154982629742552737307, 94953759765105305946966067683156574377167401875275, 88902802571733229619176668713819931811048770190271, 25267680276078003013678680992525463401061632866526, 36270218540497705585629946580636237993140746255962, 24074486908231174977792365466257246923322810917141, 91430288197103288597806669760892938638285025333403, 34413065578016127815921815005561868836468420090470, 23053081172816430487623791969842487255036638784583, 11487696932154902810424020138335124462181441773470, 63783299490636259666498587618221225225512486764533, 67720186971698544312419572409913959008952310058822, 95548255300263520781532296796249481641953868218774, 76085327132285723110424803456124867697064507995236, 37774242535411291684276865538926205024910326572967, 23701913275725675285653248258265463092207058596522, 29798860272258331913126375147341994889534765745501, 18495701454879288984856827726077713721403798879715, 38298203783031473527721580348144513491373226651381, 34829543829199918180278916522431027392251122869539, 40957953066405232632538044100059654939159879593635, 29746152185502371307642255121183693803580388584903, 41698116222072977186158236678424689157993532961922, 62467957194401269043877107275048102390895523597457, 23189706772547915061505504953922979530901129967519, 86188088225875314529584099251203829009407770775672, 11306739708304724483816533873502340845647058077308, 82959174767140363198008187129011875491310547126581, 97623331044818386269515456334926366572897563400500, 42846280183517070527831839425882145521227251250327, 55121603546981200581762165212827652751691296897789, 32238195734329339946437501907836945765883352399886, 75506164965184775180738168837861091527357929701337, 62177842752192623401942399639168044983993173312731, 32924185707147349566916674687634660915035914677504, 99518671430235219628894890102423325116913619626622, 73267460800591547471830798392868535206946944540724, 76841822524674417161514036427982273348055556214818, 97142617910342598647204516893989422179826088076852, 87783646182799346313767754307809363333018982642090, 10848802521674670883215120185883543223812876952786, 71329612474782464538636993009049310363619763878039, 62184073572399794223406235393808339651327408011116, 66627891981488087797941876876144230030984490851411, 60661826293682836764744779239180335110989069790714, 85786944089552990653640447425576083659976645795096, 66024396409905389607120198219976047599490197230297, 64913982680032973156037120041377903785566085089252, 16730939319872750275468906903707539413042652315011, 94809377245048795150954100921645863754710598436791, 78639167021187492431995700641917969777599028300699, 15368713711936614952811305876380278410754449733078, 40789923115535562561142322423255033685442488917353, 44889911501440648020369068063960672322193204149535, 41503128880339536053299340368006977710650566631954, 81234880673210146739058568557934581403627822703280, 82616570773948327592232845941706525094512325230608, 22918802058777319719839450180888072429661980811197, 77158542502016545090413245809786882778948721859617, 72107838435069186155435662884062257473692284509516, 20849603980134001723930671666823555245252804609722, 53503534226472524250874054075591789781264330331690, ] print(Solution_13(nums)) After this code was run, the terminal would show the following results, and the final answer is 5537376230.\nyuanfeng@yuans-MacBook-Air 823 % python Euler_13.py 5537376230  Problem 31 Coin sums - Solved by 83654  In this question, we are asked:\nIn the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:\n1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p). It is possible to make £2 in the following way:\n1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p How many different ways can £2 be made using any number of coins? link here\nThis is a typical problem of Dynamic Programming. Based on the descriptions, the order of the coins does not matter, and there will be enough coins to make each combination. I followed the normal way of solving DP problems by going from a small base case, and dive deeper into more complex cases. Tablation is an optimal choice to reduce the space complexity, I built a table with all the possible combinations given the total amount value.\nHere is a table of base case: only the 1 penny is used as indicated in the second column, and as the target increase, there is only one way to reach the targeted amount.\n   target only 1 p     0p 1   1p 1   2p 1   3p 1   4p 1    We then move forward to using both 1 penny and 2 penny coins. The following table shows the ways of coin combinations to reach the targeted amount. Since 0 and 1 are number below 2, only 1 penny is used. As we move to higher value of targets, if the difference between two target values is the same as a given coin, then we have one more possible combination by simply adding one more coin.\n   target 1p, 2p     0p 1   1p 1   2p 2   3p 2   4p 3    To generalize the previous process, we ran over all the possible coins. For each coin, we modify the table from values in the target column that equals the value of the coin until we reach the final target value. This is a quite straightforward algorithm that could be implemented by the following code in Python:\ndef Solution_31(target): \u0026#34;\u0026#34;\u0026#34; Dynamic programming to count the number of coin combinations \u0026#34;\u0026#34;\u0026#34; #convert the amount to pennies sum = target*100 #total values in the target column ttl = [1] + [0] * sum #list of coins to choose from coins = [1, 2, 5, 10, 20, 50, 100, 200] #as we move towards to coins of larger value, update the table by adding new possible combinations for coin in coins: for i in range(sum + 1 - coin): ttl[i + coin] += ttl[i] #return the result return str(ttl[-1]) print(Solution_31(2)) # result: 73682  Problem 31 Coin sums - Solved by 23296  In this question, we are asked:\nFind the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0, where each “_” is a single digit.\nFilling in the blank spaces with 0 or 9 will give us the minimum or maximum value of the square. We take the square root and the range of answer is [1010101010, 1389026623].\nThe last digit in the required form is 0, therefore the number we hope to find should also end in 0, this in turn would mean its square will end in two 0s. This will further reduce the range of answers to [101010101, 138902662]. Now we could look at the second-last number. Since its square ends in 900, the target number should end in either 70 or 30.\nNow we have reduced the search range to a much smaller scale. We first generate the minimum and maximum values, then write a for loop to go through each number in this range. If the last two numbers are 70 or 30, we then check if its square fits in 1_2_3_4_5_6_7_8_9_0.\nHere is an implementation of the previous algorithm.\nimport math def helper(n): \u0026#34;\u0026#34;\u0026#34; determines if the given number fits in 1_2_3_4_5_6_7_8_9_0 \u0026#34;\u0026#34;\u0026#34; for i in range(8,0,-1): n = int(n / 100); if n % 10 != i: return False; return True; def Solution_206(): \u0026#34;\u0026#34;\u0026#34; generate the range of answers and check each value \u0026#34;\u0026#34;\u0026#34; min_val = int(math.sqrt(10203040506070809) / 10); max_val = int(math.sqrt(19293949596979899) / 10) + 1; for i in range(min_val, max_val): #if the value ends in 3 or 7, we check its square num = i * 10 + 3; #if accepted, break the loop and print the value if helper(num*num): break; num = i * 10 + 7; if helper(num* num): break; print(num * 10); #result: 1389019170 Congratulations! Now you have figured out three interesting questions from Project Euler. If you find this article interesting, feel free to check out Project Euler\nScreenshots of Solved problems\n","date":1598659200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598659200,"objectID":"2c6d7a37c7bc27ea920eb01ec20ba283","permalink":"https://yuan-feng1.github.io/project/hw2/","publishdate":"2020-08-29T00:00:00Z","relpermalink":"/project/hw2/","section":"project","summary":"Solutions to 3 classical problems","tags":[""],"title":"Project Euler Solutions","type":"project"},{"authors":null,"categories":null,"content":"A portfolio website is a great choice for you to showcase your work and let recruiters know more about you. With Github Page, we could easily set up a personal website for free. And using Hugo, you can have access to hundreds of special themes to choose from.\nFor me, I\u0026rsquo;m using Mac OS system and plan to build up this website from command line. Below is a detailed tutorial of how I successfully set up my website from scratch - Stay Tuned!\nLink to my Github repository\n Install Hugo and Git  First open the terminal, and input the following command-line. Note that if you do not have homebrew installed, you may need to install it first.\nbrew install hugo I recommend installing Git as well. run git --version in your command-line for checking.\n Build on local machine  Make sure to sit inside the directory to save the website. And run the following to initialize a new site:\ncd /Users/yuanfeng/Desktop hugo new site site_name Then, we should have a new folder with the name we just made. It will come with a list of folders, and we will dig deeper into those folders in a minute.\n Select a theme  I personally enjoy designs of minimalist and the use of white or black as its main colors. It only takes googling to find ready-to-go themes but it took me a while to find my favorite.\nThen I run the following command line in the terminal to download the contents in themes folder:\ncd site_name cd themes git clone https://github.com/themefisher/academia-hugo And it\u0026rsquo;s also necessary to make sure the configurations are correct. Here I made some changes in the config.toml.\nbaseurl = \u0026#34;https://[your github username].github.io/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;the website title shown on the tab\u0026#34; theme = \u0026#34;the same as theme name (exactly the folder name) in your themes folder\u0026#34;  Test locally  I wanted to see how the webpage currently looks like by running the following:\ncd site_name hugo server The following indicated success in running it locally. By going to http://localhost:1313/ in my web browser, I could see my work so far and observe changes real-time.\nBuilt in 4 ms Watching for changes in /Users/yuanfeng/site/yuan/{archetypes,content,data,layouts,static} Watching for config changes in /Users/yuanfeng/site/yuan/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  Personalize my website  The template comes with a variety of different sections such as Publications, Recent Posts and Contact. However, in order for the main page to stay concise and minimal, I removed the less appealing and related components and replaced the sample photos and texts with mine by editing html and md files.\nAnother main change compared with the original template is the header and dropdown. This turned out to be tricky as I needed to tweak the Javascript code as well. The final results seem great!\n Deploy to Git Pages  Last step is to render my website to Github Pages. I started by running the following commnad, which will generate a folder called public and it will contain the required web files.\ncd site_name hugo  Create Github Repository  I wanted to publish my site as my github name. In order to do that, I created a new branch named \u0026lt;USERNAME\u0026gt;.github.io. and set it to public.\nThen the following command could sync the website to my github.\ncd public git init git add . git remote add origin https://github.com/username/username.github.io.git git commit -m “first commit” git push origin master After completing the committing, I went to my repository and clicked on settings, then scrolled to the section of Github Pages. It successfully returned the link of my personal website:\nhttps://yuan-feng1.github.io/\nAnd my personal website was successfully published.\nThat\u0026rsquo;s all for this blog. Thanks for reading!\nLet me know if you have any comments/question. Feel free to find me at yuan.feng347@duke.edu\n","date":1598054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598054400,"objectID":"e85fc209a454520f43b45c940e8db9a7","permalink":"https://yuan-feng1.github.io/project/hw1/","publishdate":"2020-08-22T00:00:00Z","relpermalink":"/project/hw1/","section":"project","summary":"Easy-to-follow Explanation","tags":["Demo"],"title":"How I built my own protfolio website","type":"project"},{"authors":["Yuan Feng"],"categories":[],"content":"from IPython.core.display import Image Image(\u0026#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png\u0026#39;) print(\u0026#34;Welcome to academia!\u0026#34;) Welcome to academia!  Install Python and Jupyter Install Anaconda which includes Python 3 and Jupyter notebook.\nOtherwise, for advanced users, install Jupyter notebook with pip3 install jupyter.\nCreate a new blog post as usual Run the following commands in your Terminal, substituting \u0026lt;MY_WEBSITE_FOLDER\u0026gt; and my-post with the file path to your academia website folder and a name for your blog post (without spaces), respectively:\ncd \u0026lt;MY_WEBSITE_FOLDER\u0026gt; hugo new --kind post post/my-post cd \u0026lt;MY_WEBSITE_FOLDER\u0026gt;/content/post/my-post/ Create or upload a Jupyter notebook Run the following command to start Jupyter within your new blog post folder. Then create a new Jupyter notebook (New \u0026gt; Python Notebook) or upload a notebook.\njupyter notebook Convert notebook to Markdown jupyter nbconvert Untitled.ipynb --to markdown --NbConvertApp.output_files_dir=. # Copy the contents of Untitled.md and append it to index.md: cat Untitled.md | tee -a index.md # Remove the temporary file: rm Untitled.md Edit your post metadata Open index.md in your text editor and edit the title etc. in the front matter according to your preference.\nTo set a featured image, place an image named featured into your post\u0026rsquo;s folder.\nFor other tips, such as using math, see the guide on writing content with academia.\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"6e929dc84ed3ef80467b02e64cd2ed64","permalink":"https://yuan-feng1.github.io/post/jupyter/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/post/jupyter/","section":"post","summary":"Learn how to blog in academia using Jupyter notebooks","tags":[],"title":"Display Jupyter Notebooks with academia","type":"post"},{"authors":[],"categories":[],"content":"Welcome to Slides academia\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne Two Three  A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/img/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://yuan-feng1.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using academia's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Yuan Feng"],"categories":[],"content":"Create a free website with academia using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup academia Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of academia:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an academia sticker Wear the T-shirt    \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes academia comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  academia Admin: An admin tool to import publications from BibTeX or import assets for an offline site academia Scripts: Scripts to help migrate content to new versions of academia  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"737a4d9f40e4da19ee82ee5cb6985167","permalink":"https://yuan-feng1.github.io/post/snail/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/snail/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["academia"],"title":"A Study of Snail Behavior","type":"post"},{"authors":["Yuan Feng"],"categories":[],"content":"Create a free website with academia using Markdown, Jupyter, or RStudio. Choose a beautiful color theme and build anything with the Page Builder - over 40 widgets, themes, and language packs included!\nCheck out the latest demo of what you\u0026rsquo;ll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\n Setup academia Get Started View the documentation Ask a question Request a feature or report a bug Updating? View the Update Guide and Release Notes Support development of academia:  Donate a coffee Become a backer on Patreon Decorate your laptop or journal with an academia sticker Wear the T-shirt    \nKey features:\n Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 15+ language packs including English, 中文, and Português Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Color Themes academia comes with day (light) and night (dark) mode built-in. Click the sun/moon icon in the top right of the Demo to see it in action!\nChoose a stunning color and font theme for your site. Themes are fully customizable and include:\n         Ecosystem  academia Admin: An admin tool to import publications from BibTeX or import assets for an offline site academia Scripts: Scripts to help migrate content to new versions of academia  Install You can choose from one of the following four methods to install:\n one-click install using your web browser (recommended) install on your computer using Git with the Command Prompt/Terminal app install on your computer by downloading the ZIP files install on your computer with RStudio  Then personalize and deploy your new site.\nUpdating View the Update Guide.\nFeel free to star the project on Github to help keep track of updates.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1461110400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555459200,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://yuan-feng1.github.io/post/getting-started/","publishdate":"2016-04-20T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Create a beautifully simple website in under 10 minutes.","tags":["academia"],"title":"academia: the website builder for Hugo","type":"post"}]