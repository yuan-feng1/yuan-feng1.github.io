<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Yuan Feng</title>
    <link>https://yuan-feng1.github.io/project/</link>
    <description>Recent content in Projects on Yuan Feng</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://yuan-feng1.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project Euler Solutions</title>
      <link>https://yuan-feng1.github.io/project/hw2/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yuan-feng1.github.io/project/hw2/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem 13 Large sum - Solved by 224972&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this question, we are asked to:&lt;/p&gt;
&lt;p&gt;Work out the first ten digits of the sum of the following one-hundred 50-digit numbers. &lt;a href=&#34;https://projecteuler.net/problem=13&#34;&gt;link here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The thought process of this problem is quite straightforward: we first sum up the one-hundred 50-digit numbers, then with the result, turn it into a string, then slicing the first ten digits would solve the problem.&lt;/p&gt;
&lt;p&gt;In python, this is actually an easy process, using the built-in &lt;code&gt;sum()&lt;/code&gt; and &lt;code&gt;str()&lt;/code&gt; function, we could simply generate the sum, then turn it into a string and slice the first 10 digits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
def Solution_13&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    The sum of nums array,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    transform into string,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    take the first 10 digits
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    ttl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nums&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ttl&lt;span style=&#34;color:#f92672&#34;&gt;)[&lt;/span&gt;:10&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; answer

nums &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
	37107287533902102798797998220837590246510135740250,
	46376937677490009712648124896970078050417018260538,
	74324986199524741059474233309513058123726617309629,
	91942213363574161572522430563301811072406154908250,
	23067588207539346171171980310421047513778063246676,
	89261670696623633820136378418383684178734361726757,
	28112879812849979408065481931592621691275889832738,
	44274228917432520321923589422876796487670272189318,
	47451445736001306439091167216856844588711603153276,
	70386486105843025439939619828917593665686757934951,
	62176457141856560629502157223196586755079324193331,
	64906352462741904929101432445813822663347944758178,
	92575867718337217661963751590579239728245598838407,
	58203565325359399008402633568948830189458628227828,
	80181199384826282014278194139940567587151170094390,
	35398664372827112653829987240784473053190104293586,
	86515506006295864861532075273371959191420517255829,
	71693888707715466499115593487603532921714970056938,
	54370070576826684624621495650076471787294438377604,
	53282654108756828443191190634694037855217779295145,
	36123272525000296071075082563815656710885258350721,
	45876576172410976447339110607218265236877223636045,
	17423706905851860660448207621209813287860733969412,
	81142660418086830619328460811191061556940512689692,
	51934325451728388641918047049293215058642563049483,
	62467221648435076201727918039944693004732956340691,
	15732444386908125794514089057706229429197107928209,
	55037687525678773091862540744969844508330393682126,
	18336384825330154686196124348767681297534375946515,
	80386287592878490201521685554828717201219257766954,
	78182833757993103614740356856449095527097864797581,
	16726320100436897842553539920931837441497806860984,
	48403098129077791799088218795327364475675590848030,
	87086987551392711854517078544161852424320693150332,
	59959406895756536782107074926966537676326235447210,
	69793950679652694742597709739166693763042633987085,
	41052684708299085211399427365734116182760315001271,
	65378607361501080857009149939512557028198746004375,
	35829035317434717326932123578154982629742552737307,
	94953759765105305946966067683156574377167401875275,
	88902802571733229619176668713819931811048770190271,
	25267680276078003013678680992525463401061632866526,
	36270218540497705585629946580636237993140746255962,
	24074486908231174977792365466257246923322810917141,
	91430288197103288597806669760892938638285025333403,
	34413065578016127815921815005561868836468420090470,
	23053081172816430487623791969842487255036638784583,
	11487696932154902810424020138335124462181441773470,
	63783299490636259666498587618221225225512486764533,
	67720186971698544312419572409913959008952310058822,
	95548255300263520781532296796249481641953868218774,
	76085327132285723110424803456124867697064507995236,
	37774242535411291684276865538926205024910326572967,
	23701913275725675285653248258265463092207058596522,
	29798860272258331913126375147341994889534765745501,
	18495701454879288984856827726077713721403798879715,
	38298203783031473527721580348144513491373226651381,
	34829543829199918180278916522431027392251122869539,
	40957953066405232632538044100059654939159879593635,
	29746152185502371307642255121183693803580388584903,
	41698116222072977186158236678424689157993532961922,
	62467957194401269043877107275048102390895523597457,
	23189706772547915061505504953922979530901129967519,
	86188088225875314529584099251203829009407770775672,
	11306739708304724483816533873502340845647058077308,
	82959174767140363198008187129011875491310547126581,
	97623331044818386269515456334926366572897563400500,
	42846280183517070527831839425882145521227251250327,
	55121603546981200581762165212827652751691296897789,
	32238195734329339946437501907836945765883352399886,
	75506164965184775180738168837861091527357929701337,
	62177842752192623401942399639168044983993173312731,
	32924185707147349566916674687634660915035914677504,
	99518671430235219628894890102423325116913619626622,
	73267460800591547471830798392868535206946944540724,
	76841822524674417161514036427982273348055556214818,
	97142617910342598647204516893989422179826088076852,
	87783646182799346313767754307809363333018982642090,
	10848802521674670883215120185883543223812876952786,
	71329612474782464538636993009049310363619763878039,
	62184073572399794223406235393808339651327408011116,
	66627891981488087797941876876144230030984490851411,
	60661826293682836764744779239180335110989069790714,
	85786944089552990653640447425576083659976645795096,
	66024396409905389607120198219976047599490197230297,
	64913982680032973156037120041377903785566085089252,
	16730939319872750275468906903707539413042652315011,
	94809377245048795150954100921645863754710598436791,
	78639167021187492431995700641917969777599028300699,
	15368713711936614952811305876380278410754449733078,
	40789923115535562561142322423255033685442488917353,
	44889911501440648020369068063960672322193204149535,
	41503128880339536053299340368006977710650566631954,
	81234880673210146739058568557934581403627822703280,
	82616570773948327592232845941706525094512325230608,
	22918802058777319719839450180888072429661980811197,
	77158542502016545090413245809786882778948721859617,
	72107838435069186155435662884062257473692284509516,
	20849603980134001723930671666823555245252804609722,
	53503534226472524250874054075591789781264330331690,
&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;

print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Solution_13&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;nums&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this code was run, the terminal would show the following results, and the final answer is 5537376230.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
yuanfeng@yuans-MacBook-Air &lt;span style=&#34;color:#ae81ff&#34;&gt;823&lt;/span&gt; % python Euler_13.py
&lt;span style=&#34;color:#ae81ff&#34;&gt;5537376230&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem 31 Coin sums - Solved by 83654&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this question, we are asked:&lt;/p&gt;
&lt;p&gt;In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation:&lt;/p&gt;
&lt;p&gt;1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p).
It is possible to make £2 in the following way:&lt;/p&gt;
&lt;p&gt;1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins? &lt;a href=&#34;https://projecteuler.net/problem=31&#34;&gt;link here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a typical problem of &lt;code&gt;Dynamic Programming&lt;/code&gt;. Based on the descriptions, the order of the coins does not matter, and there will be enough coins to make each combination. I followed the normal way of solving DP problems by going from a small base case, and dive deeper into more complex cases. &lt;code&gt;Tablation&lt;/code&gt; is an optimal choice to reduce the space complexity, I built a table with all the possible combinations given the total amount value.&lt;/p&gt;
&lt;p&gt;Here is a table of base case: only the 1 penny is used as indicated in the second column, and as the target increase, there is only one way to reach the targeted amount.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;target&lt;/th&gt;
&lt;th&gt;only 1 p&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We then move forward to using both 1 penny and 2 penny coins. The following table shows the ways of coin combinations to reach the targeted amount. Since 0 and 1 are number below 2, only 1 penny is used. As we move to higher value of targets, if the difference between two target values is the same as a given coin, then we have one more possible combination by simply adding one more coin.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;target&lt;/th&gt;
&lt;th&gt;1p, 2p&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1p&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2p&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3p&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4p&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To generalize the previous process, we ran over all the possible coins. For each coin, we modify the table from values in the target column that equals the value of the coin until we reach the final target value. This is a quite straightforward algorithm that could be implemented by the following code in Python:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
def Solution_31&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;target&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  Dynamic programming to count the number
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  of coin combinations
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#convert the amount to pennies&lt;/span&gt;
	sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; target*100
  &lt;span style=&#34;color:#75715e&#34;&gt;#total values in the target column&lt;/span&gt;
	ttl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; + &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; * sum
  &lt;span style=&#34;color:#75715e&#34;&gt;#list of coins to choose from&lt;/span&gt;
 	coins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;1, 2, 5, 10, 20, 50, 100, 200&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#as we move towards to coins of larger value, update the table by adding new possible combinations&lt;/span&gt; 
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coin in coins:
		&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in range&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sum + &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; - coin&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
			ttl&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i + coin&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; +&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ttl&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#return the result&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ttl&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;-1&lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;

print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Solution_31&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# result: 73682&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Problem 31 Coin sums - Solved by 23296&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this question, we are asked:&lt;/p&gt;
&lt;p&gt;Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,
where each “_” is a single digit.&lt;/p&gt;
&lt;p&gt;Filling in the blank spaces with 0 or 9 will give us the minimum or maximum value of the square. We take the square root and the range of answer is [1010101010, 1389026623].&lt;/p&gt;
&lt;p&gt;The last digit in the required form is 0, therefore the number we hope to find should also end in 0, this in turn would mean its square will end in two 0s. This will further reduce the range of answers to [101010101, 138902662]. Now we could look at the second-last number. Since its square ends in 900, the target number should end in either 70 or 30.&lt;/p&gt;
&lt;p&gt;Now we have reduced the search range to a much smaller scale. We first generate the minimum and maximum values, then write a for loop to go through each number in this range. If the last two numbers are 70 or 30, we then check if its square fits in 1_2_3_4_5_6_7_8_9_0.&lt;/p&gt;
&lt;p&gt;Here is an implementation of the previous algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
import math

def helper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  determines if the given number fits in 1_2_3_4_5_6_7_8_9_0
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in range&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8,0,-1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
      n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;n / 100&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; n % &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i:
          &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; False;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; True;

def Solution_206&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;:  
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  generate the range of answers and check each value
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;  
  min_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;math.sqrt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;10203040506070809&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; / 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
  max_val &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;math.sqrt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;19293949596979899&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; / 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; + 1;
    
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i in range&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;min_val, max_val&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;#if the value ends in 3 or 7, we check its square&lt;/span&gt;
      num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; + 3;
      &lt;span style=&#34;color:#75715e&#34;&gt;#if accepted, break the loop and print the value&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; helper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;num*num&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
          break;
        
      num &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i * &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; + 7;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; helper&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;num* num&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:
          break;
  print&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;num * 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;#result: 1389019170&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Congratulations! Now you have figured out three interesting questions from Project Euler. If you find this article interesting, feel free to check out &lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/drive/folders/13oqgkZA9Pqa4BGbakiPZVguvAkShETve?usp=sharing&#34;&gt;Screenshots of Solved problems&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I built my own protfolio website</title>
      <link>https://yuan-feng1.github.io/project/hw1/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://yuan-feng1.github.io/project/hw1/</guid>
      <description>&lt;p&gt;A portfolio website is a great choice for you to showcase your work and let recruiters know more about you. With Github Page, we could easily set up a personal website for free. And using Hugo, you can have access to hundreds of special themes to choose from.&lt;/p&gt;
&lt;p&gt;For me, I&amp;rsquo;m using Mac OS system and plan to build up this website from command line. Below is a detailed tutorial of how I successfully set up my website from scratch - Stay Tuned!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yuan-feng1/yuan-feng1.github.io&#34;&gt;Link to my Github repository&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install Hugo and Git&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First open the terminal, and input the following command-line. Note that if you do not have &lt;code&gt;homebrew&lt;/code&gt; installed, you may need to install it first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I recommend installing Git as well. run &lt;code&gt;git --version&lt;/code&gt; in your command-line for checking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build on local machine&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure to sit inside the directory to save the website. And run the following to initialize a new site:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd /Users/yuanfeng/Desktop
hugo new site site_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, we should have a new folder with the name we just made. It will come with a list of folders, and we will dig deeper into those folders in a minute.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Select a theme&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I personally enjoy designs of minimalist and the use of white or black as its main colors. It only takes googling to find ready-to-go themes but it took me a while to find my favorite. Its GitHub repo could be found &lt;a href=&#34;https://github.com/themefisher/academia-hugo&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I run the following command line in the terminal to download the contents in themes folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd site_name
cd themes
git clone https://github.com/themefisher/academia-hugo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And it&amp;rsquo;s also necessary to make sure the configurations are correct. Here I made some changes in the config.toml.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;baseurl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://[your github username].github.io/&amp;#34;&lt;/span&gt;
languageCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
title &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the website title shown on the tab&amp;#34;&lt;/span&gt;
theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;the same as theme name (exactly the folder name) in your themes folder&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Test locally&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to see how the webpage currently looks like by running the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd site_name
hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following indicated success in running it locally. By going to &lt;code&gt;http://localhost:1313/ &lt;/code&gt;in my web browser, I could see my work so far and observe changes real-time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Built in &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; ms
Watching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; changes in /Users/yuanfeng/site/yuan/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;archetypes,content,data,layouts,static&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
Watching &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; config changes in /Users/yuanfeng/site/yuan/config.toml
Environment: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;development&amp;#34;&lt;/span&gt;
Serving pages from memory
Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender
Web Server is available at http://localhost:1313/ &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bind address 127.0.0.1&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Personalize my website&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The template comes with a variety of different sections such as Publications, Recent Posts and Contact. However, in order for the main page to stay concise and minimal, I removed the less appealing and related components and replaced the sample photos and texts with mine by editing html and md files.&lt;/p&gt;
&lt;p&gt;Another main change compared with the original template is the header and dropdown. This turned out to be tricky as I needed to tweak the Javascript code as well. The final results seem great!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./sample.jpg&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Deploy to Git Pages&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Last step is to render my website to Github Pages. I started by running the following commnad, which will generate a folder called &lt;code&gt;public&lt;/code&gt; and it will contain the required web files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd site_name
hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create Github Repository&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I wanted to publish my site as my github name. In order to do that, I created a new branch named &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io.&lt;/code&gt; and set it to public.&lt;/p&gt;
&lt;p&gt;Then the following command could sync the website to my github.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd public
git init
git add .
git remote add origin https://github.com/username/username.github.io.git
git commit -m “first commit”
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After completing the committing, I went to my repository and clicked on settings, then scrolled to the section of Github Pages. It successfully returned the link of my personal website:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://yuan-feng1.github.io/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And my personal website was successfully published.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all for this blog. Thanks for reading!&lt;/p&gt;
&lt;p&gt;Let me know if you have any comments/question. Feel free to find me at &lt;code&gt;yuan.feng347@duke.edu&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
